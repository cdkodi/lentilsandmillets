#!/usr/bin/env python3
"""
Simple test script for AI Article Generation Service
"""

import asyncio
import json
import sys
from datetime import datetime

# Test if we can import all required modules
def test_imports():
    """Test if all required modules can be imported"""
    print("üîç Testing imports...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI imported successfully")
        
        import openai
        print("‚úÖ OpenAI imported successfully")
        
        import anthropic
        print("‚úÖ Anthropic imported successfully")
        
        import psycopg2
        print("‚úÖ PostgreSQL driver imported successfully")
        
        import pydantic
        print("‚úÖ Pydantic imported successfully")
        
        # Test our modules
        from models import GenerationOptions, ArticleCategory
        print("‚úÖ Custom models imported successfully")
        
        from services.prompts import PromptTemplates
        print("‚úÖ Prompt templates imported successfully")
        
        from services.ai_processor import AIProcessor
        print("‚úÖ AI processor imported successfully")
        
        from services.database import DatabaseService
        print("‚úÖ Database service imported successfully")
        
        from utils.logging import setup_logging
        print("‚úÖ Logging utilities imported successfully")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import failed: {e}")
        print("üí° Try: pip install -r requirements.txt")
        return False

def test_environment():
    """Test environment variables"""
    print("\nüîç Testing environment configuration...")
    
    import os
    from dotenv import load_dotenv
    
    # Load environment variables
    load_dotenv()
    
    required_vars = {
        'DATABASE_URL': 'Database connection string',
        'OPENAI_API_KEY': 'OpenAI API key (optional if using Anthropic)',
        'ANTHROPIC_API_KEY': 'Anthropic API key (optional if using OpenAI)',
        'JWT_SECRET_KEY': 'JWT secret for authentication'
    }
    
    missing_vars = []
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Don't print actual API keys
            if 'API_KEY' in var or 'SECRET' in var:
                print(f"‚úÖ {var}: {'*' * 10}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: Missing ({description})")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  Missing environment variables: {missing_vars}")
        print("üìù Please update your .env file")
        return False
    
    return True

def test_database_connection():
    """Test database connection"""
    print("\nüîç Testing database connection...")
    
    try:
        import os
        import psycopg2
        from dotenv import load_dotenv
        
        load_dotenv()
        
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL not configured")
            return False
        
        # Try to connect
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Test basic query
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Database connected successfully")
        print(f"   PostgreSQL version: {version}")
        
        # Check if our tables exist
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('articles', 'recipes');
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        
        if 'articles' in tables:
            print("‚úÖ Articles table found")
        else:
            print("‚ö†Ô∏è  Articles table not found (will be created)")
            
        if 'recipes' in tables:
            print("‚úÖ Recipes table found")
        else:
            print("‚ö†Ô∏è  Recipes table not found (will be created)")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("üí° Check your DATABASE_URL and ensure the database is running")
        return False

def test_ai_models():
    """Test AI model connectivity"""
    print("\nüîç Testing AI model connectivity...")
    
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    # Test OpenAI
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key and openai_key != 'sk-your-openai-api-key-here':
        try:
            import openai
            client = openai.OpenAI(api_key=openai_key)
            
            # Simple test call
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Say 'AI service test successful'"}],
                max_tokens=10
            )
            
            print("‚úÖ OpenAI API connection successful")
            
        except Exception as e:
            print(f"‚ùå OpenAI API test failed: {e}")
    else:
        print("‚ö†Ô∏è  OpenAI API key not configured")
    
    # Test Anthropic
    anthropic_key = os.getenv('ANTHROPIC_API_KEY')
    if anthropic_key and anthropic_key != 'ant-your-anthropic-api-key-here':
        try:
            import anthropic
            client = anthropic.Anthropic(api_key=anthropic_key)
            
            # Simple test call
            message = client.messages.create(
                model="claude-3-haiku-20240307",
                max_tokens=10,
                messages=[{"role": "user", "content": "Say 'AI service test successful'"}]
            )
            
            print("‚úÖ Anthropic API connection successful")
            
        except Exception as e:
            print(f"‚ùå Anthropic API test failed: {e}")
    else:
        print("‚ö†Ô∏è  Anthropic API key not configured")
    
    # Test Google Gemini
    google_key = os.getenv('GOOGLE_API_KEY')
    if google_key and google_key != 'your-google-gemini-api-key-here':
        try:
            import google.generativeai as genai
            genai.configure(api_key=google_key)
            
            # Simple test call
            model = genai.GenerativeModel('gemini-1.5-flash')
            response = model.generate_content(
                "Say 'AI service test successful'",
                generation_config=genai.types.GenerationConfig(max_output_tokens=10)
            )
            
            print("‚úÖ Google Gemini API connection successful")
            
        except Exception as e:
            print(f"‚ùå Google Gemini API test failed: {e}")
    else:
        print("‚ö†Ô∏è  Google Gemini API key not configured")

def main():
    """Run all tests"""
    print("üß™ AI Article Generation Service - Test Suite")
    print("=" * 50)
    
    tests = [
        ("Module Imports", test_imports),
        ("Environment Configuration", test_environment),
        ("Database Connection", test_database_connection),
        ("AI Model Connectivity", test_ai_models),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ All tests passed! Service should be ready to start.")
        print("üöÄ Run: ./start.sh or python main.py")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please fix the issues before starting the service.")
        sys.exit(1)

if __name__ == "__main__":
    main()